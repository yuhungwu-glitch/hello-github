<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>動物記憶翻牌遊戲</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans TC', sans-serif;
            touch-action: manipulation;
        }
        .card-container {
            perspective: 1000px;
        }
        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        .card.flipped .card-inner {
            transform: rotateY(180deg);
        }
        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 0.75rem;
        }
        .card-front {
            background-color: #60a5fa;
        }
        .card-back {
            background-color: #f0f9ff;
            transform: rotateY(180deg);
            font-size: 3rem;
        }
        @media (max-width: 640px) {
            .card-back {
                font-size: 2rem;
            }
        }
        @media (max-width: 400px) {
            .card-back {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body class="bg-sky-100 min-h-screen flex flex-col items-center justify-center p-4">

    <div class="w-full max-w-2xl mx-auto">
        <h1 class="text-3xl md:text-4xl font-bold text-sky-800 text-center mb-2">動物記憶翻牌遊戲</h1>
        <div class="flex justify-between items-center mb-4 p-2 bg-white/50 rounded-lg shadow">
            <p class="text-lg text-sky-700">步數: <span id="moves-count" class="font-bold">0</span></p>
            <p class="text-lg text-sky-700">已配對: <span id="pairs-matched" class="font-bold">0</span> / 8</p>
        </div>

        <div id="game-board" class="grid grid-cols-4 gap-2 sm:gap-4 aspect-square"></div>

        <div class="mt-6 text-center">
            <button id="reset-button" class="bg-sky-600 hover:bg-sky-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform transform hover:scale-105">
                重新開始
            </button>
        </div>
    </div>

    <div id="win-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div id="win-modal-content" class="bg-white p-8 rounded-2xl shadow-2xl text-center transform transition-all scale-95 opacity-0">
            <h2 class="text-3xl font-bold text-yellow-500 mb-4">恭喜！</h2>
            <p class="text-gray-700 text-lg mb-2">你成功配對了所有動物！</p>
            <p id="final-moves" class="text-gray-600 mb-6">總共用了 0 步。</p>
            <button id="play-again-button" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform transform hover:scale-105">
                再玩一次
            </button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gameBoard = document.getElementById('game-board');
            const movesCountSpan = document.getElementById('moves-count');
            const pairsMatchedSpan = document.getElementById('pairs-matched');
            const resetButton = document.getElementById('reset-button');
            const winModal = document.getElementById('win-modal');
            const winModalContent = document.getElementById('win-modal-content');
            const finalMovesSpan = document.getElementById('final-moves');
            const playAgainButton = document.getElementById('play-again-button');

            const animals = ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼'];
            let cards = [];
            let flippedCards = [];
            let matchedPairs = 0;
            let moves = 0;
            let lockBoard = false;

            function shuffle(array) {
                let currentIndex = array.length, randomIndex;
                while (currentIndex !== 0) {
                    randomIndex = Math.floor(Math.random() * currentIndex);
                    currentIndex--;
                    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
                }
                return array;
            }

            function initializeGame() {
                moves = 0;
                matchedPairs = 0;
                movesCountSpan.textContent = moves;
                pairsMatchedSpan.textContent = `${matchedPairs} / ${animals.length}`;
                lockBoard = false;
                flippedCards = [];
                gameBoard.innerHTML = '';
                winModal.classList.add('hidden');
                winModalContent.classList.add('scale-95', 'opacity-0');

                const cardDeck = shuffle([...animals, ...animals]);
                cards = [];

                cardDeck.forEach(animal => {
                    const card = createCard(animal);
                    gameBoard.appendChild(card);
                    cards.push(card);
                });
            }

            function createCard(animal) {
                const card = document.createElement('div');
                card.classList.add('card', 'card-container', 'cursor-pointer');
                card.dataset.animal = animal;

                card.innerHTML = `
                    <div class="card-inner">
                        <div class="card-face card-front shadow-md"></div>
                        <div class="card-face card-back shadow-md">
                            <span>${animal}</span>
                        </div>
                    </div>
                `;
                
                card.addEventListener('click', handleCardClick);
                return card;
            }

            function handleCardClick() {
                if (lockBoard || this.classList.contains('flipped') || this.classList.contains('matched')) {
                    return;
                }
                this.classList.add('flipped');
                flippedCards.push(this);
                if (flippedCards.length === 2) {
                    incrementMoves();
                    checkForMatch();
                }
            }

            function incrementMoves() {
                moves++;
                movesCountSpan.textContent = moves;
            }

            function checkForMatch() {
                lockBoard = true;
                const [cardOne, cardTwo] = flippedCards;

                if (cardOne.dataset.animal === cardTwo.dataset.animal) {
                    setTimeout(() => {
                        cardOne.classList.add('matched');
                        cardTwo.classList.add('matched');
                        matchedPairs++;
                        pairsMatchedSpan.textContent = `${matchedPairs} / ${animals.length}`;
                        resetTurn();
                        checkForWin();
                    }, 500);
                } else {
                    setTimeout(() => {
                        cardOne.classList.remove('flipped');
                        cardTwo.classList.remove('flipped');
                        resetTurn();
                    }, 1000);
                }
            }

            function checkForWin() {
                if (matchedPairs === animals.length) {
                    setTimeout(() => {
                        finalMovesSpan.textContent = `總共用了 ${moves} 步。`;
                        winModal.classList.remove('hidden');
                        setTimeout(() => {
                            winModalContent.classList.remove('scale-95', 'opacity-0');
                        }, 50);
                    }, 500);
                }
            }

            function resetTurn() {
                flippedCards = [];
                lockBoard = false;
            }

            resetButton.addEventListener('click', initializeGame);
            playAgainButton.addEventListener('click', initializeGame);

            initializeGame();
        });
    </script>
</body>
</html>
